language: c

services:
- docker

env:
  global:
# https://bugs.launchpad.net/ubuntu/+source/apt/+bug/1802718
# and/or travis docker image(s) not having enabled 'deb-src' lines
# contrary to docker documentation -> https://docs.docker.com/samples/library/ubuntu/
# NB At time of writing 2018-11-11: artful doesn't really need this FIX_APT_CONFIG, but no harm in applying it
# TRAVIS BROKEN
#   - FIX_APT_CONFIG="sed -i '/^#\sdeb-src /s/^#//' /etc/apt/sources.list"
# The common extra dependencies required beyond the default distribution 'build-dep'
   - COMMON_DEPS="gtk-doc-tools yelp-tools libgeoclue-2-dev nettle-dev liboauth-dev libzip-dev"
# 'glib-compile-resources' has moved around packages libglib2.0-bin --> libglib2.0-dev-bin, so can't be in common.
#
# For available build images-> https://docs.travis-ci.com/user/reference/overview/
#
# For at least Ubuntu 20.04, something is now including package tz_data (or via python3-tz)
#  which at time of writing needs specifically setting up:
   - DEBIAN_FRONTEND=noninteractive
   - TZ=Europe/London
  matrix:
# NB Ubuntu 16.04 doesn't have a new enough geoclue so simply disable using it
   - BUILD_IMG=ubuntu:16.04 DEPS="libglib2.0-bin libmapnik-dev" OPTS="--disable-geoclue"
   - BUILD_IMG=ubuntu:18.04 DEPS=libglib2.0-dev-bin
   - BUILD_IMG=ubuntu:20.04 DEPS=libglib2.0-dev-bin
# Docker images previously (temporarily?) available but have vanished:
#  - BUILD_IMG=ubuntu:18.10
#  - BUILD_IMG=ubuntu:19.04
#  - BUILD_IMG=ubuntu:19.10 DEPS=libglib2.0-dev-bin
# Test basic levels of some configure options
# Use the latest LTS version for these
   - BUILD_IMG=ubuntu:18.04 DEPS="libglib2.0-dev-bin libexif-dev" OPTS="--with-libexif"
   - BUILD_IMG=ubuntu:18.04 DEPS=libglib2.0-dev-bin OPTS="--disable-bzip2"
   - BUILD_IMG=ubuntu:18.04 DEPS=libglib2.0-dev-bin OPTS="--disable-geotag"
   - BUILD_IMG=ubuntu:18.04 DEPS=libglib2.0-dev-bin OPTS="--disable-magic"
   - BUILD_IMG=ubuntu:18.04 DEPS=libglib2.0-dev-bin OPTS="--disable-mapnik"
   - BUILD_IMG=ubuntu:18.04 DEPS=libglib2.0-dev-bin OPTS="--disable-mbtiles"
   - BUILD_IMG=ubuntu:18.04 DEPS=libglib2.0-dev-bin OPTS="--disable-nettle"
   - BUILD_IMG=ubuntu:18.04 DEPS=libglib2.0-dev-bin OPTS="--disable-realtime-gps-tracking"
   - BUILD_IMG=ubuntu:18.04 DEPS=libglib2.0-dev-bin OPTS="--disable-zip"

#
# Note the use of ';' instead of '&&' after the build-dep command, since we want the commands to continue even if build-dep
#  returns a non-zero exit code, particularly for the case of build dependencies changing and the dependencies in apt-get is out of date
#  (e.g. gnome-doc-utils no longer available in 20.04, but at time of writing still referred to in apt-get)
#
script: docker run --rm=true -v $HOME:$HOME:rw $BUILD_IMG /bin/sh -c "sed -i '/^#\sdeb-src /s/^#//' /etc/apt/sources.list && apt-get update && apt-get build-dep --yes viking ; apt-get install --yes $COMMON_DEPS $DEPS && cd $PWD && ./autogen.sh $OPTS && make -j && make -j check && make install"
# Further packages are installed as these are new dependencies for the latest source code, compared to the dependencies listed in the distribution version (`apt-get build-dep` always refers to the version which is built for the OS rather than the up-to-date source)
